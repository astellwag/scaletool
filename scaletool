#!/usr/bin/perl -w

use strict;

use List::MoreUtils;

my $fb_sep = "+-----+-----+-----+-----+-----+-----+-----+";
my $fb_spacer = "  ";
my $fb_note = "O";
my $fb_root = "R";
my $fb_empty = " ";
my $fb_fret = "|";
my $fb_firstfret = 5;
my $fb_left = 4;
my $fb_maxperstring = 3;
my $tuning = "standard";

my @tones = ( "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "H" );
my @tones2 = ( "C", "Db", "D", "Eb", "E", "F", "Gb", "G", "Ab", "A", "Bb", "H" );
my %steps = (
	major            => [ 2, 2, 1, 2, 2, 2, 1 ],
	minor            => [ 2, 1, 2, 2, 1, 2, 2 ],
	ionian           => [ 2, 2, 1, 2, 2, 2, 1 ],
	dorian           => [ 2, 1, 2, 2, 2, 1, 2 ],
	phrygian         => [ 1, 2, 2, 2, 1, 2, 2 ],
	lydian           => [ 2, 2, 2, 1, 2, 2, 1 ],
	mixolydian       => [ 2, 2, 1, 2, 2, 1, 2 ],
	aeolian          => [ 2, 1, 2, 2, 1, 2, 2 ],
	locrian          => [ 1, 2, 2, 1, 2, 2, 2 ],
	major_pentatonic => [ 2, 2, 3, 2, 3 ],
	minor_pentatonic => [ 3, 2, 2, 3, 2 ],
	harmonic_minor   => [ 2, 1, 2, 2, 1, 3, 1 ],
	harmonic_major   => [ 2, 2, 1, 2, 1, 3, 1 ],
);
my %tunings = (
	standard => {
		start => 4,
		steps => [ 5, 5, 5, 4, 5 ],
	},
	open_d => {
		start => 2,
		steps => [ 7, 5, 4, 3, 5 ],
	},
	dropped_d => {
		start => 2,
		steps => [ 7, 5, 5, 4, 5 ],
	},
	open_g => {
		start => 2,
		steps => [ 5, 7, 5, 4, 3 ],
	},
);	
	

my $start = "C";
my $mode = "major";

unless(exists $steps{$mode}) {
	print "Mode $mode not found, use one of ";
	print join( ", ", keys %steps);
	print "\n";
	exit 1;
}

my $index = List::MoreUtils::first_index {$_ eq $start} @tones;
my $index2 = List::MoreUtils::first_index {$_ eq $start} @tones2;
if($index < 0 && $index2 < 0) {
	print "Starting tone $start not found, use one of ";
	print join(", ", @tones, @tones2);
	print "\n";
	exit 2;
}

# Toene in der Tonleiter berechnen
my @scale = ();
my $note = ($index<0)?$index2:$index;
for (my $i=0; $i<@{$steps{$mode}}; $i++) {
	if ($index >= 0) {
		push @scale, $tones[$note%12];
	} else {
		push @scale, $tones2[$note%12];
	}
	$note += $steps{$mode}[$i];
}

# Töne der Leersaiten bestimmen
my @stringtone = ();
$stringtone[0] = $tunings{$tuning}{start};
for (my $string = 1; $string < 6; $string++) {
	$stringtone[$string] = ($stringtone[$string-1] + $tunings{$tuning}{steps}[$string-1]) % 12;
}

print @scale;
print "\n";

# Fretboard ausgeben
for (my $string = 5; $string >= 0; $string--) {
	my $perstring = 0;
	print " " x $fb_left . $fb_sep . "\n";
	print " " . $tones[$stringtone[$string]] . " ";
	if (length $tones[$stringtone[$string]] == 1) {print " "};

	# Leerseite in der Tonleiter?
	my $tone = $tones[($stringtone[$string]+$fb_firstfret)%12];
	my $found = List::MoreUtils::first_index {$_ eq $tone} @scale;
	if ($fb_firstfret == 0 and $found >=0) {
		print (($tone eq $start)?$fb_root:$fb_note);
		$perstring = 1;

	} else {
		print $fb_fret;
	}

	# weitere Bünde
	for (my $fret = 1; $ fret < 8; $fret++) {
		my $tone = $tones[($stringtone[$string]+$fb_firstfret+$fret)%12];
		print $fb_spacer;
		$found = List::MoreUtils::first_index {$_ eq $tone} @scale;
		if ($found >= 0 and $perstring < $fb_maxperstring) {
			print (($tone eq $start)?$fb_root:$fb_note);
			$perstring++;
		} else {
			print $fb_empty;
		}
		#print $tones[($stringtone[$string] + $fret)%12];
		#if (length $tones[($stringtone[$string] + $fret)%12] ==1) {print " "};
		print $fb_spacer . $fb_fret;
	}
	print "\n";
}
print " " x $fb_left . $fb_sep . "\n";

